"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import secrets
from pathlib import Path
from dotenv import load_dotenv

from django.contrib.auth.hashers import make_password

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# Environment-determined variables

# SECURITY WARNING: don't run with debug turned on in production!
# Environment variables

# Debug mode
debug = os.getenv("DEBUG")
if debug is None:
    DEBUG = True
else:
    DEBUG = (debug.lower() != "false")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-087iw2ikqyj&eqigdn8yy0)8q=n^kyqxrty3st3ap2*)%e@f6r'
if not DEBUG:
    SECRET_KEY = os.getenv("SECRET_KEY", secrets.token_hex(32))

# Load a .env in a development environment
if DEBUG is True:
    os.unsetenv("RESEND_KEY")
    os.unsetenv("GMAIL_EMAIL")
    os.unsetenv("GMAIL_PASSWORD")
    os.unsetenv("SUPABASE_URL")
    os.unsetenv("SUPABASE_KEY")
    os.unsetenv("ADMIN_USERNAME")
    os.unsetenv("ADMIN_PASSWORD")

    load_dotenv('.env')
else:
    load_dotenv("/run/secrets/backend_s")

# Supabase credentials
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

# Delivery credentials
RESEND_KEY = os.getenv("RESEND_KEY")
GMAIL_EMAIL = os.getenv("GMAIL_EMAIL")
GMAIL_PASSWORD = os.getenv("GMAIL_PASSWORD")

# Automation credentials
ADMIN_USERNAME = make_password(os.getenv("ADMIN_USERNAME"))
ADMIN_PASSWORD = make_password(os.getenv("ADMIN_PASSWORD"))

# Allowed hosts for production environment
ALLOWED_HOSTS = []

hosts = os.getenv("ALLOWED_HOSTS")
if not DEBUG and hosts is not None:
    hosts = hosts.split(';')
    for host in hosts:
        ALLOWED_HOSTS.append(host.strip())


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    "corsheaders",
    'rest_framework',

    'apps.generation.apps.GenerationConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage"
    }
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / "statictemp"
STATICFILES_DIRS = []

if not DEBUG:
    STATICFILES_DIRS.append(BASE_DIR / "staticfiles")

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Cross-Origin Configuration
CORS_ALLOWED_ORIGINS = []
if not DEBUG and os.getenv("FRONTEND_URL") is not None:
    allowed_origins = os.getenv("FRONTEND_URL").split(";")
    for origin in allowed_origins:
        CORS_ALLOWED_ORIGINS.append(origin)
if DEBUG:
    CORS_ALLOWED_ORIGINS.append("http://192.168.18.20:3000")
